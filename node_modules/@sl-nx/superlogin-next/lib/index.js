'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuperLogin = void 0;
const events_1 = __importDefault(require("events"));
const express_1 = __importDefault(require("express"));
const nano_1 = __importDefault(require("nano"));
const configure_1 = require("./config/configure");
const seed_1 = __importDefault(require("./design/seed"));
const local_1 = __importDefault(require("./local"));
const mailer_1 = require("./mailer");
const middleware_1 = require("./middleware");
const oauth_1 = require("./oauth");
const routes_1 = __importDefault(require("./routes"));
const user_1 = require("./user");
const util_1 = require("./util");
class SuperLogin extends user_1.User {
    constructor(configData, couchServer, passport) {
        const configHelper = new configure_1.ConfigHelper(configData);
        const config = configHelper.config;
        const router = express_1.default.Router();
        const emitter = new events_1.default.EventEmitter();
        if (!passport || typeof passport !== 'object') {
            passport = require('passport');
        }
        const middleware = new middleware_1.Middleware(passport);
        if (!couchServer) {
            couchServer = (0, nano_1.default)({
                url: (0, util_1.getDBURL)(config.dbServer),
                parseUrl: false
            });
        }
        const userDB = couchServer.use(config.dbServer.userDB);
        const couchAuthDB = couchServer.use(config.dbServer.couchAuthDB);
        const mailer = new mailer_1.Mailer(config);
        super(config, userDB, couchAuthDB, mailer, emitter, couchServer);
        const oauth = new oauth_1.OAuth(router, passport, this, config);
        // Seed design docs for the user database
        let userDesign = require('./design/user-design');
        userDesign = (0, util_1.addProvidersToDesignDoc)(config, userDesign);
        (0, seed_1.default)(userDB, userDesign);
        // Configure Passport local login and api keys
        (0, local_1.default)(config, passport, this);
        // Load the routes
        (0, routes_1.default)(config, router, passport, this);
        this.router = router;
        this.passport = passport;
        this.registerProvider = oauth.registerProvider.bind(oauth);
        this.registerOAuth2 = oauth.registerOAuth2.bind(oauth);
        this.registerTokenProvider = oauth.registerTokenProvider.bind(oauth);
        this.sendEmail = mailer.sendEmail.bind(mailer);
        this.requireAuth = middleware.requireAuth.bind(middleware);
        this.requireRole = middleware.requireRole.bind(middleware);
        this.requireAnyRole = middleware.requireAnyRole.bind(middleware);
        this.requireAllRoles = middleware.requireAllRoles.bind(middleware);
    }
}
exports.SuperLogin = SuperLogin;
